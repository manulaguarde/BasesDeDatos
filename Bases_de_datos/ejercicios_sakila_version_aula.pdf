use sakila;
-- Cinco actores con mas peliculas

SELECT 
    a.first_name,
    a.last_name,
    COUNT(fa.film_id) AS total_films
FROM
    actor a
        JOIN
    film_actor fa ON a.actor_id = fa.actor_id
GROUP BY a.actor_id
ORDER BY total_films DESC
LIMIT 5;

-- Peliculas que nunca han sido alquiladas

select * from film limit 1;
select * from rental limit 1;

select count(distinct inventory_id) from rental;
select count(distinct inventory_id) from inventory;


-- pais con mas clientes

SELECT 
    country, COUNT(customer_id) AS num_countries
FROM
    customer c
        JOIN
    address ad USING (address_id) -- Esto solo funciona cuando la culumna que se comparte es exactamente igual
        JOIN
    city USING (city_id)
        JOIN
    country co USING (country_id)
GROUP BY co.country_id
ORDER BY num_countries DESC;

select * from country limit 1;

-- 4) Tres películas con mayores ingresos por alquiler. 
/* Pistas:
- Los ingresos están en payment.amount
- Saca id,nombre de cada película con los ingresos.
*/
select * from payment 
order by amount desc limit 20;

SELECT 
    f.film_id as id_pelicula, f.title as titulo, SUM(p.amount) AS ingresos
FROM
    film f
        JOIN
    inventory i USING (film_id)
        JOIN
    rental r USING (inventory_id)
        JOIN
    payment p USING (rental_id)
GROUP BY f.film_id
ORDER BY ingresos DESC
LIMIT 3;


-- 5) Ingreso promedio por alquiler en cada tienda

-- tambien lo hice con 
-- STORE -> CUSTOMER -> PAYMENT
-- STORE -> CUSTOMER -> RENTAL -> PAYMENT
-- STORE -> STAFF USING (STORE_ID) -> PAYMENT

SELECT 
    i.store_id as tienda, (AVG(p.amount), 2) AS ingreso_promedio
FROM
    inventory i
        JOIN
    rental r USING (inventory_id)
        JOIN
    payment p USING (rental_id)
GROUP BY i.store_id
ORDER BY ingreso_promedio ASC;

SELECT 
    st.store_id as tienda, ROUND(AVG(p.amount), 2) AS ingreso_promedio
FROM
    store st
        JOIN
    customer c USING (store_id)
        JOIN
    payment p USING (customer_id)
GROUP BY st.store_id
ORDER BY ingreso_promedio ASC;

SELECT 
    st.store_id as tienda, ROUND(AVG(p.amount), 2) AS ingreso_promedio
FROM
    store st
        JOIN
    customer c USING (store_id)
		JOIN
	rental r USING (customer_id)
        JOIN
    payment p USING (rental_id)
GROUP BY st.store_id
ORDER BY ingreso_promedio ASC;

SELECT 
    st.store_id as tienda, ROUND(AVG(p.amount), 2) AS ingreso_promedio
FROM
    store st
        JOIN
    staff USING (store_id)
        JOIN
    payment p USING (staff_id)
GROUP BY st.store_id
ORDER BY ingreso_promedio ASC;

select * from store;

-- 6) Ventas totales por categoría ordenadas

SELECT
	c.name as name_category, sum(payment.amount) as total_amount
FROM	
	category c
		JOIN
	film_category USING (category_id)
		JOIN
	film USING (film_id)
		JOIN
	inventory USING (film_id)
		JOIN
	rental USING (inventory_id)
		JOIN
	payment USING (rental_id)
-- GROUP BY c.name
GROUP BY c.category_id
ORDER BY total_amount ASC;

-- es una buena practica agrupar por id (o columnas que esten mejor ordenadas) porque el proceso es mas rapido, mas eficiente.
	
 -- Si me pide ventas totales primero conviene empezar por payment y no al reves   
 
SELECT
	c.name as name_category, sum(payment.amount) as total_amount
FROM	
	payment
		JOIN
	rental USING (rental_id)
		JOIN
	inventory USING (inventory_id)
		JOIN
	film USING (film_id)
		JOIN
	film_category USING (film_id)
		JOIN
	category c USING (category_id)
-- GROUP BY c.name
GROUP BY c.category_id
ORDER BY total_amount ASC;

select * from category limit 5;

-- 7) Actores con al menos diez películas de categorías distintas

SELECT
	a.actor_id,
	concat (a.first_name, ' ', a.last_name) AS full_name, -- queda mejor concatenado, osea sumando las dos columnas
    COUNT(DISTINCT fc.category_id) AS total_different_categories
FROM actor a
		JOIN
	film_actor USING (actor_id)
		JOIN
	film USING (film_id)
		JOIN
	film_category fc USING (film_id)
GROUP BY a.actor_id
HAVING total_different_categories >= 10
ORDER BY actor_id ASC;

SELECT
	a.first_name AS name, 
    a.last_name AS last_name,
    COUNT(DISTINCT fc.category_id) AS different_categories
FROM actor a
		JOIN
	film_actor USING (actor_id)
		JOIN
	film USING (film_id)
		JOIN
	film_category fc USING (film_id)
GROUP BY a.actor_id
HAVING COUNT(DISTINCT fc.category_id) >= 10
ORDER BY different_categories ASC;

-- Vamos a hacer esta consulta con un WHERE en lugar de con un HAVING
-- Es un adelanto de una tarea posterior
-- Hacer consulta sobre consulta (subconsultas
  
 -- Distribucion de numero de actores por numero de categorias distintas en las que trabajan 
SELECT subconsulta.total_different_categories, COUNT(actor_id) AS num_actors
FROM (
			SELECT
				a.actor_id,
				concat (a.first_name, ' ', a.last_name) AS full_name,
				COUNT(DISTINCT fc.category_id) AS total_different_categories
			FROM actor a
					JOIN
				film_actor USING (actor_id)
					JOIN
				film USING (film_id)
					JOIN
				film_category fc USING (film_id)
			GROUP BY a.actor_id
            ) AS subconsulta
WHERE subconsulta.total_different_categories >= 10
GROUP BY subconsulta.total_different_categories
ORDER BY subconsulta.total_different_categories DESC;
    
-- 8) Tiendas con más stock disponible
-- Esta consulta requiere que uses una funcion : inventory_in_stock

SELECT store.store_id AS tienda,
	COUNT(inventory.inventory_id) AS inventario_disponible
    -- inventory.inventory_id
FROM store
		JOIN 
	inventory USING (store_id)
		-- JOIN
	-- rental USING (inventory_id)
WHERE inventory_in_stock(inventory_id)
GROUP BY store.store_id;
-- HAVING inventory_in_stock(inventory_id);


-- 9) Diez películas con mayor diferencia entre coste de reposición y tarifa de alquiler

SELECT * from film limit 10;

SELECT 
	f.film_id, f.title AS titulo, (f.replacement_cost - f.rental_rate) AS diferencia_de_coste
FROM
	film f
ORDER BY diferencia_de_coste DESC 
LIMIT 10;
    
    
    
		-- JOIN
	-- inventory i USING (film_id)
		-- JOIN
    -- rental r USING (inventory_id)
		-- JOIN
    -- payment p USING (rental_id)


-- 10) Películas con más de tres actores y duración menor a 90 minutos
-- 11) Cliente que más ha gastado